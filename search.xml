<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[如何使用Hexo建立一个自己的个人Blog及主页美化？]]></title>
      <url>%2F2017%2F01%2F13%2F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BABlog%E5%8F%8A%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96%EF%BC%9F%2F</url>
      <content type="text"><![CDATA[Hexo 是基于 Node.js 开发的一个静态博客生成器，提供本地实时预览及部署功能。基本使用方式如下： 注册Github首先我们需要做的是去 GitHub 注册一个帐号，并创建一个Repository仓库。这里需要注意的是仓库的名称必须是 用户名.github.io ，才能使用 Github Pages . 配置git的具体使用请移步阮一峰老师的网站 创建本地仓库 新建仓库文件夹 1$ mkdir blog 初始化仓库 进入到blog文件夹，执行初始化命令。12$ cd blog # 切换到blog目录$ git init # 初始化git仓库 未更完……]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[res.end()和res.send()的区别?]]></title>
      <url>%2F2016%2F05%2F14%2Fres-end-%E5%92%8Cres-send-%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
      <content type="text"><![CDATA[很多时候,我们在写请求回调处理函数时,必须要求在结尾写上res.end(),但有时,我们用res.send()来替代res.end(),也没事,这是为什么?1234567const express = require('express');const app = express();app.get('/',function(req,res)&#123; console.log('get请求,'); res.send("Hello world");&#125;) 因此去查了下官方文档: res.end([data] [, encoding])Ends the response process. This method actually comes from Node core, specifically the response.end() method of http.ServerResponse. Use to quickly end the response without any data. If you need to respond with data, instead use methods such as res.send() and res.json(). 简单说就是如果服务端没有数据传回客户端就可以直接用red.end返回，如果有数据可以使用res.send,red.json此时可以不写res.end了，因为在前面两个方法中默认会返回;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[了解Hexo站点的布局]]></title>
      <url>%2F2016%2F05%2F13%2F%E4%BA%86%E8%A7%A3Hexo%E7%AB%99%E7%82%B9%E7%9A%84%E5%B8%83%E5%B1%80%2F</url>
      <content type="text"><![CDATA[刚看完Hexo Docs中模版那一部分的时候，很不理解这是什么意思？这里就来谈谈Hexo的站点布局到底是怎样的？我觉得这是非常重要的，了解了这些，就可以对你的站点布局『为所欲为』了。 1、前提123456789101112131415light-ch/├── _config.yml├── languages/├── source/└── layout/ ├── _partial/ ├── _widget/ ├── archive.ejs ├── category.ejs ├── index.ejs ├── layout.ejs ├── page.ejs ├── post.ejs └── tag.ejs 2、默认布局Hexo的主题布局文件基本上是在layout这个文件夹下，每个模版都默认使用layout布局，那么来看看layout.ejs这个文件的内容。 123456789101112&lt;%- partial('_partial/head') %&gt;&lt;body&gt; &lt;header id="header" class="inner"&gt;&lt;%- partial('_partial/header') %&gt;&lt;/header&gt; &lt;div id="content" class="inner"&gt; &lt;div id="main-col" class="alignleft"&gt;&lt;div id="wrapper"&gt;&lt;%- body %&gt;&lt;/div&gt;&lt;/div&gt; &lt;aside id="sidebar" class="alignright"&gt;&lt;%- partial('_partial/sidebar') %&gt;&lt;/aside&gt; &lt;div class="clearfix"&gt;&lt;/div&gt; &lt;/div&gt; &lt;footer id="footer" class="inner"&gt;&lt;%- partial('_partial/footer') %&gt;&lt;/footer&gt; &lt;%- partial('_partial/after_footer') %&gt;&lt;/body&gt;&lt;/html&gt; 结合局部模块的知识，不难看出这个layout.ejs就是一个完整的页面，有head、header、content、sidebar、footer以及after_footer，页面所有的部分都通过局部模块嵌入在这个文件中。然而中间有一段&lt;%- body %&gt;指的是什么呢？这里就是各个布局的关键所在。 每个Hexo站点基本上分为index（首页）、post（文章详情页）、page（导航标签页）、archive（归档页）、category（类别页）以及tag（标签页），没错就是Layout文件夹下的几个文件。它们每个都代表一种布局，将它们用来替换掉layout.ejs文件里的&lt;%- body %&gt;就得到了各个布局的页面代码。 其实你打开各个布局的文件，你会发现他们有些其实是很相似的，甚至是一样的。比如post.ejs和page.ejs，这两者代码如下（以light-ch主题为例）：1234567&#123;% codeblock post.ejs %&#125;&lt;%- partial('_partial/article', &#123;item: page, index: false&#125;) %&gt;&#123;% endcodeblock %&#125;&#123;% codeblock page.ejs %&#125;&lt;%- partial('_partial/article', &#123;item: page, index: false&#125;) %&gt;&#123;% endcodeblock %&#125; 可以看出他们是一模一样的，他们都引用了_partial/article局部模块，事实上这两种在light-ch主题里的布局是一样的，当然你也可以通过在article.ejs里判断layout来使他们不一样。 3、首页布局最后来看看index.ejs，它是首页布局，跟其他的布局还是不一样的。代码如下： 12345&#123;% codeblock index.ejs %&#125;&lt;% page.posts.each(function(item)&#123; %&gt;&lt;%- partial('_partial/article', &#123;item: item, index: true&#125;) %&gt;&lt;% &#125;); %&gt;&#123;% endcodeblock %&#125; 这一块什么意思？首先是一个循环语句，因为首页要显示出近期发布的几篇文章，引入局部模块的时候使用了Local Variables（本地变量）的相关内容，这里是将post页面变量赋值给了本地变量item，换句话说，在_partial/article.ejs这个文件中所有的item变量都指的是post页面变量，里面使用了很多页面变量的一些键值，参考这里页面变量看article.ejs的代码就容易多了。 下面分析article.ejs中一小段代码如下：12345&lt;article class="&lt;%= item.layout %&gt;"&gt; &lt;% if (item.photos &amp;&amp; item.photos.length)&#123; %&gt; &lt;!--当文章存在照片的时候，也就是在前置声明中加入了photos变量--&gt; &lt;%- partial('post/gallery') %&gt; &lt;!--就会引入这段代码，用来显示相册--&gt; &lt;% &#125; %&gt; &lt;div class="post-content"&gt; 后续…]]></content>
    </entry>

    
  
  
</search>
